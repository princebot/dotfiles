#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Name:     install
# Author:   prince@princebot.com
# Source:   https://github.com/princebot/dotfiles
# Synopsis: Installer script for dotfiles.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Constants and functions.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

declare -r PROG=install
declare -r CONFIG_DIR="${HOME}/.config"
declare -r DOTFILES_DIR="${CONFIG_DIR}/dotfiles"

# die displays an error message then terminates this script with exit status 1.
function die {
    >&2 printf -- "${PROG}: error: $@"
    exit 1
}

# Destructively copy file $1 over file $2.
function clobber {
    rm -f -- "$2" && cp -f -- "$1" "$2"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Scipt.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Get the absolute path of the main dotfiles package directory.
source_dir=$(cd "$(dirname "$0")/.." && pwd -P)
[[ -n ${source_dir} ]] || die "cannot determine source directory"

# Set the current working directory to $source_dir
cd "${source_dir}" || die "cannot enter directory ${source_dir}"

# Create dotfiles directory. If it already exists, save the previous one first.
if [[ -d ${DOTFILES_DIR} ]]; then
    if ! mv "${DOTFILES_DIR}" "${DOTFILES_DIR}.$(date +%s).bak"; then
        die "cannot back up existing ${DOTFILES_DIR}"
    fi
else
    if !(mkdir "${CONFIG_DIR}" && mkdir "${DOTFILES_DIR}"); then
        die "cannot create ${DOTFILES_DIR}"
    fi
fi

# Back up existing Bash and Vim configuration files.
for f in ~/.bash_profile ~/.bashrc ~/.bash_logout ~/.vimrc; do
    [[ -e $f ]] || continue
    mv "$f" "${f}.$(date +%s).bak" || die "cannot save backup of $f"
done

# Write new configuration files in $HOME.
clobber profile ~/.bashrc || die "cannot write ${HOME}/.bashrc"
clobber logout ~/.bash_logout || die "cannot write ${HOME}/.bash_logout"
clobber vimrc ~/.vimrc || die "cannot write ${HOME}/.vimrc"

# Hard link ~/.bashrc to ~/.bash_profile --- we want them to be the same file.
rm -f ~/.bash_profile
if ! ln ~/.bashrc ~/.bash_profile; then
    die "cannot link ${HOME}/.bash_profile to ${HOME}/.bashrc"
fi

# Copy remaining dotfiles components into ~/.config/dotfiles.
cp -R lib "${DOTFILES_DIR}/lib" || die "cannot copy dotfiles library"
if ! cp dotfiles.d/*.*sh "${DOTFILES_DIR}"; then
    die "cannot copy startup scripts into ${DOTFILES_DIR}"
fi

echo
echo "${PROG}: all operations complete"
echo "${PROG}: start a fresh shell to load the new configuration"
echo
